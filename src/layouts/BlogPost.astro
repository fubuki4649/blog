---
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import '../styles/global.css';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
	<head>
    <style is:global>
      code {
          position: relative !important;
      }

      .copy-button {
          position: absolute;
          top: 0;
          right: 0;
          background: #374151;
          color: white;
          border: none;
          padding: 4px 8px;
          border-radius: 4px;
          cursor: pointer;
          font-size: 12px;
          line-height: 18px;
          opacity: 0.8;
      }

      .copy-button:hover {
          opacity: 1;
          background: #4b5563;
      }
    </style>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Find all code blocks
        const codeBlocks = document.querySelectorAll('pre code');

        codeBlocks.forEach((codeBlock) => {

          // Create copy button
          const copyButton = document.createElement('button');
          copyButton.className = 'copy-button';
          copyButton.textContent = 'Copy';

          copyButton.addEventListener('click', async () => {
            try {
              await navigator.clipboard.writeText(codeBlock.textContent.slice(0, codeBlock.textContent.length - 4));
              copyButton.textContent = 'Copied!';
              setTimeout(() => {
                copyButton.textContent = 'Copy';
              }, 2000);
            } catch (err) {
              console.error('Failed to copy: ', err);
            }
          });

          codeBlock.appendChild(copyButton);
        });
      });
    </script>

		<BaseHead title={title} description={description} />
		<style>
			main {
          position: relative;
          width: calc(100% - 2em);
          max-width: 100%;
          margin: 0;
			}
      .back-button {
          position: absolute;
          top: 1em;
          left: 1em;
          background: var(--divider);
          color: var(--text-secondary);
          border: none;
          padding: 4px 12px;
          border-radius: 4px;
          cursor: pointer;
          font-size: 24px;
          line-height: 32px;
          opacity: 0.8;
      }
			.hero-image {
          width: 100%;
			}
			.hero-image img {
          display: block;
          margin: 0 auto;
          border-radius: 12px;
          box-shadow: var(--shadow);
			}
			.prose {
          width: 1020px;
          max-width: calc(100% - 2em);
          margin: auto;
          padding: 0.5em 1em 1em;
          color: var(--text-primary);
			}
			.title {
          margin-bottom: 1.5em;
          text-align: center;
          line-height: 1;

          h3 {
              margin-top: 0;
          }
			}
			.date {
          display: flex;
          flex-direction: column;
          gap: 0.5em;
          margin-bottom: 1em;
          color: var(--text-secondary);
			}
			.last-updated-on {
				  font-style: italic;
			}
      @media (max-width: 1289px) {
        .back-button {
          position: static;
          margin: 0.25em;
        }
      }
		</style>
	</head>

	<body>
		<Header />
		<main>
      <button class="back-button" onclick="window.location.href = '/blog'">‚Üê Back</button>
			<article>
				<div class="prose">
					<div class="title">
            <h3>{title}</h3>
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<hr />
					</div>
					<slot />
				</div>
			</article>
		</main>
		<Footer />
	</body>
</html>
