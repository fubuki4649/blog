---
import BaseHead from '../components/BaseHead.astro';
import '../styles/grub.css';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<!doctype html>
<html lang="en">
<head>
	<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
</head>
<body>
<p class="title">GNU fubuki 2.22</p>

<ul>
	{
		posts.map((post, index) => (
			<li class="item" data-index={index}>
				<a class="item-link" href={`/blog/${post.id}/`}>
					<span class="bullet">
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="15 0 80 100" style="vertical-align: -0.26em;">
								<path d="M55 15 L55 85 M30 32 L80 68 M30 68 L80 32" stroke="currentColor" stroke-width="8" stroke-linecap="square" fill="none"/>
						</svg>
					</span><span class="entryText">{post.data.title}
						({
							post.data.pubDate.toLocaleDateString('en-us', {
								year: 'numeric',
								month: 'short',
								day: 'numeric',
							})
						})
					</span>
				</a>
			</li>
		))
	}
	<li class="item">
		<a class="item-link" href={`/blog`}>
			<span class="bullet">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="15 0 80 100" style="vertical-align: -0.26em;">
					<path d="M55 15 L55 85 M30 32 L80 68 M30 68 L80 32" stroke="currentColor" stroke-width="8" stroke-linecap="square" fill="none"/>
				</svg>
			</span><span class="entryText">More Posts ...</span>
		</a>
	</li>
</ul>

<p class="description">
	Welcome to my blog! I'm a CS student from Waterloo, Canada. I build things in mostly kotlin/typescript/rust am always experimenting with new things that catch my interest.
	<br><br>
	If you are interested in checking out my projects, here is my <a href="https://github.com/fubuki4649" target="_blank">github</a> and <a href="https://x.com/fubukidev" target="_blank">x</a>
</p>

</body>
</html>

<script>

	// Get DOM elements
	const items = document.querySelectorAll('.item');
	const links = document.querySelectorAll('.item-link');

	// Track current position
	let currentPosition = 0;
	const totalItems = items.length;

	// Function to update highlight
	function updateHighlight() {
		items.forEach(item => item.classList.remove('selected'));
		items[currentPosition].classList.add('selected');
	}

	// Function to go to linked item
	function navigateToCurrentItem() {
		const currentLink = links[currentPosition];
		if (currentLink) {
			window.location.href = currentLink.getAttribute('href') as string;
		}
	}

	// Set keyboard event listeners
	document.addEventListener('keydown', function(event) {
		if(event.key === 'ArrowUp') {
			if (currentPosition > 0) {
				currentPosition--;
				updateHighlight();
			}
		} else if(event.key === 'ArrowDown') {
			if (currentPosition < totalItems - 1) {
				currentPosition++;
				updateHighlight();
			}
		} else if(event.key === 'Enter') {
			navigateToCurrentItem()
		}
	});

	// Set hover listeners
	items.forEach((item, index) => {
		// Select on hover
		item.addEventListener('mouseenter', () => {
			currentPosition = index;
			updateHighlight();
		});
		// Click too, why not
		item.addEventListener('click', () => {
			currentPosition = index;
			updateHighlight();
		});
	});


	// Initialize
	updateHighlight();

</script>
